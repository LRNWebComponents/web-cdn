---
AWSTemplateFormatVersion: '2010-09-09'
Resources:
  AllowCloudFrontInvalidation:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AllowCloudFrontInvalidation
      Roles:
        - !Ref CdnBuilderRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - cloudfront:CreateInvalidation
              - cloudfront:GetInvalidation
              - cloudfront:ListInvalidations
            Resource: "*"
  AllowCdnParameterStoreAccess:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AllowCdnParameterStoreAcccess
      Roles:
        - !Ref CdnBuilderRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - ssm:DescribeParameters
              - ssm:GetParameters
            Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/web-community-cdn.*"

  CdnBuilderRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/CloudFrontReadOnlyAccess"
        - "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
      Policies:
        - PolicyName: "AllowAssemblerImageAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:GetRepositoryPolicy"
                  - "ecr:DescribeRepositories"
                  - "ecr:ListImages"
                  - "ecr:DescribeImages"
                  - "ecr:BatchGetImage"
                Resource: !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/web-community-cdn-assembler"

  CdnBuildInvokerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: "AllowBuildInvocation"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "codepipeline:StartPipelineExecution"
                Resource: !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:web-community-cdn-*-assembler-pipeline"
  EdgeLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /web-community-cdn/
      RoleName: web-community-cdn-edge-lambda
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
                - "edgelambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  CloudformationCustomResourcesRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /web-community-cdn/
      RoleName: web-community-cdn-cfn-custom-res
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: "AllowLambdaManipulation"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'lambda:*'
                Resource:
                  - !Sub "arn:aws:lambda:us-west-2:${AWS::AccountId}:function:web-community-cdn-*"
                  - !Sub "arn:aws:lambda:us-east-1:${AWS::AccountId}:function:web-community-cdn-*"
              - Effect: Allow
                Action:
                  - 'lambda:TagResource'
                  - 'lambda:UntagResource'
                  - 'lambda:ListTags'
                Resource:
                  - '*'
        - PolicyName: AllowPassRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'iam:GetRole'
                  - 'iam:PassRole'
                Resource:
                  - "arn:aws:iam::*:role/web-community-cdn/*"
              # Deny the ability to pass the all-powerful cloudformation role
              - Effect: Deny
                Action:
                  - 'iam:PassRole'
                Resource:
                  - "arn:aws:iam::*:role/web-community-cdn/cfn-deploy"


  CloudformationDeploymentRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /web-community-cdn/
      RoleName: web-community-cdn-cfn-deploy
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: AllowCloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                 - '*'
        - PolicyName: AllowPipelineBucketAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:PutObject'
                Resource:
                 - !Sub 'arn:aws:s3:::codepipeline-${AWS::Region}-${AWS::AccountId}/*'
        - PolicyName: AllowAssemblerImageAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:*'
                Resource:
                  - !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/web-community-cdn-*"
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                Resource:
                  - '*'
        - PolicyName: AllowCodebuildAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'codebuild:*'
                Resource:
                  - !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/web-community-cdn-*"
        - PolicyName: AllowS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - 'arn:aws:s3:::web-community-cdn-*'
                  - 'arn:aws:s3:::byu-web-community-cdn-*'
        - PolicyName: AllowApiGatewayAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'apigateway:*'
                Resource:
                  - '*'
        - PolicyName: AllowCloudFormationAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudformation:*'
                Resource:
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/web-community-cdn-*"
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:aws:transform/*"
              - Effect: Allow
                Action:
                  - 'cloudformation:ValidateTemplate'
                Resource:
                  - '*'
        - PolicyName: AllowCloudFrontAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudfront:*'
                Resource:
                  - '*'
        - PolicyName: AllowLambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'lambda:*'
                Resource:
                  - !Sub "arn:aws:lambda:us-west-2:${AWS::AccountId}:function:web-community-cdn-*"
                  - !Sub "arn:aws:lambda:us-east-1:${AWS::AccountId}:function:web-community-cdn-*"
              - Effect: Allow
                Action:
                  - 'lambda:TagResource'
                  - 'lambda:UntagResource'
                  - 'lambda:ListTags'
                Resource:
                  - '*'
        - PolicyName: AllowRoute53Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'route53:*'
                Resource:
                  - '*'
        - PolicyName: AllowPassRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'iam:GetRole'
                  - 'iam:PassRole'
                Resource:
                  - "arn:aws:iam::*:role/web-community-cdn/*"
              # Deny the ability to pass ourself as a role to another service
              - Effect: Deny
                Action:
                  - 'iam:PassRole'
                Resource:
                  - "arn:aws:iam::*:role/web-community-cdn/cfn-deploy"


Outputs:
  BuilderRole:
    Description: ARN of the role for the CDN build process
    Value: !GetAtt CdnBuilderRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-BuilderRole"
  InvokerRole:
    Description: ARN of the role for the CDN build invoker
    Value: !GetAtt CdnBuildInvokerRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-InvokerRole"
  CloudformationDeploymentRole:
    Description: ARN of the role for the CDN pipeline
    Value: !GetAtt CloudformationDeploymentRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-CloudformationDeploymentRole"
  EdgeLambdaRole:
    Description: ARN of the role for basic edge lambda invocations
    Value: !GetAtt EdgeLambdaExecutionRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-EdgeLambdaExecutionRole"
  CloudformationCustomResourcesRole:
    Description: ARN of the role for cloudformation customization
    Value: !GetAtt CloudformationCustomResourcesRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-CloudformationCustomResourcesRole"


